<script>
// ===============================================
// SISTEMA DE CONTING√äNCIA - ESTRUTURA MODULAR
// ===============================================

let currentStep = 1;
let selectedData = {
  linha: null,
  produto: null,
  numOrp: null,
  qtdPrd: null,
  qtdBat: null
};
let itemCounter = 0; // Iniciando em 0 para que o primeiro item seja 1

// Configura√ß√£o das p√°ginas
const pageConfig = {
  'dashboard': {
    title: 'Dashboard - Sistema de Conting√™ncia',
    breadcrumb: '<span class="current">Dashboard</span>'
  },
  'ordens-cadastro': {
    title: 'Cadastrar Ordem de Produ√ß√£o',
    breadcrumb: 'Ordens > <span class="current">Cadastro</span>'
  },
  'ordens-listagem': {
    title: 'Ordens de Produ√ß√£o',
    breadcrumb: 'Ordens > <span class="current">Listagem</span>'
  },
  'produtos-cadastro': {
    title: 'Cadastrar Produto de Conting√™ncia',
    breadcrumb: 'Produtos > <span class="current">Cadastro</span>'
  },
  'produtos-listagem': {
    title: 'Produtos de Conting√™ncia',
    breadcrumb: 'Produtos > <span class="current">Listagem</span>'
  },
  'relatorios': {
    title: 'Relat√≥rios - Reporting Services',
    breadcrumb: '<span class="current">Relat√≥rios</span>'
  }
};

// ===============================================
// SISTEMA DE EVENTOS CUSTOMIZADOS
// ===============================================

// Mapeamento de p√°ginas para seus eventos de carregamento
const pageLoadEvents = {
  'produtos-cadastro': 'loadProductsForm',
  'produtos-listagem': 'loadProductsList', 
  'ordens-cadastro': 'loadOrdersForm',
  'ordens-listagem': 'loadOrdersList'
};

// Registra todos os event listeners para carregamento de dados
function setupPageLoadEvents() {
  // Evento para carregar formul√°rio de produtos
  document.addEventListener('loadProductsForm', function() {
    console.log('üéØ Evento loadProductsForm disparado');
    loadUnityMeasurements();
    setupProductForm(); // Configura o formul√°rio quando a p√°gina √© carregada
  });

  // Evento para carregar listagem de produtos
  document.addEventListener('loadProductsList', function() {
    console.log('üéØ Evento loadProductsList disparado');
    loadProdutosListagem();
  });

  // Evento para carregar formul√°rio de ordens
  document.addEventListener('loadOrdersForm', function() {
    console.log('üéØ Evento loadOrdersForm disparado');
    loadLines();
    resetOrderForm();
  });

  // Evento para carregar listagem de ordens
  document.addEventListener('loadOrdersList', function() {
    console.log('üéØ Evento loadOrdersList disparado');
    loadOrdersListagem();
  });
}

// Dispara evento customizado para uma p√°gina espec√≠fica
function triggerPageLoadEvent(pageId) {
  const eventName = pageLoadEvents[pageId];
  if (eventName) {
    console.log(`üöÄ Disparando evento ${eventName} para p√°gina ${pageId}`);
    const event = new CustomEvent(eventName, { 
      detail: { pageId: pageId },
      bubbles: true 
    });
    document.dispatchEvent(event);
  }
}

// ===============================================
// INICIALIZA√á√ÉO
// ===============================================
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ JavaScript carregado e DOM pronto!');
  
  // Aguarda um pouco para garantir que tudo foi carregado
  setTimeout(() => {
    // Configura todos os event listeners
    setupPageLoadEvents();
    
    // Inicializa com dashboard ou √∫ltimo menu aberto
    const lastActivePage = localStorage.getItem('lastActivePage');
    if (lastActivePage) {
      showPage(lastActivePage);
    } else {
      showPage('dashboard');
    }
  }, 100);
});

// ===============================================
// NAVEGA√á√ÉO ENTRE P√ÅGINAS
// ===============================================
function showPage(pageId) {
  console.log(`üéØ Tentando mostrar p√°gina: ${pageId}`);
  
  // Remove active de todas as p√°ginas
  document.querySelectorAll('.page-content').forEach(page => {
    page.classList.remove('active');
  });

  // Remove active de todos os menu headers
  document.querySelectorAll('.menu-header').forEach(header => {
    header.classList.remove('active');
  });

  // Remove active de todos os submenu items
  document.querySelectorAll('.submenu-item').forEach(item => {
    item.classList.remove('active');
  });

  // Ativa p√°gina atual
  const targetPage = document.getElementById(`page-${pageId}`);
  console.log(`üìÑ P√°gina encontrada:`, targetPage);
  
  if (targetPage) {
    targetPage.classList.add('active');
    console.log(`‚úÖ P√°gina ${pageId} ativada com sucesso!`);
    
    // Atualiza header
    if (pageConfig[pageId]) {
      const pageTitle = document.getElementById('pageTitle');
      const breadcrumb = document.getElementById('breadcrumb');
      
      if (pageTitle) pageTitle.textContent = pageConfig[pageId].title;
      if (breadcrumb) breadcrumb.innerHTML = pageConfig[pageId].breadcrumb;
    }

    // Marca item ativo no menu
    if (typeof event !== 'undefined' && event && event.target && event.target.classList) {
      event.target.classList.add('active');
    }
    
    // Salva √∫ltimo menu aberto no localStorage
    localStorage.setItem('lastActivePage', pageId);
    
    // Dispara evento customizado para carregar dados da p√°gina
    // Aguarda um ciclo do event loop para garantir que o DOM esteja atualizado
    setTimeout(() => {
      triggerPageLoadEvent(pageId);
    }, 0);
  } else {
    console.error(`‚ùå P√°gina ${pageId} n√£o encontrada!`);
  }
}

function toggleMenu(menuId) {
  const submenu = document.getElementById(`submenu-${menuId}`);
  if (!submenu) return;
  
  const header = submenu.previousElementSibling;

  // Fecha outros menus
  document.querySelectorAll('.submenu').forEach(menu => {
    if (menu.id !== `submenu-${menuId}`) {
      menu.classList.remove('expanded');
      menu.previousElementSibling.classList.remove('expanded');
    }
  });

  // Toggle do menu atual
  submenu.classList.toggle('expanded');
  header.classList.toggle('expanded');
  
  // Adiciona evento de clique para fechar menu quando clicar fora
  setTimeout(() => {
    if (submenu.classList.contains('expanded')) {
      document.addEventListener('click', closeMenuOnClickOutside);
    } else {
      document.removeEventListener('click', closeMenuOnClickOutside);
    }
  }, 10);
  
  function closeMenuOnClickOutside(event) {
    if (!submenu.contains(event.target) && !header.contains(event.target)) {
      submenu.classList.remove('expanded');
      header.classList.remove('expanded');
      document.removeEventListener('click', closeMenuOnClickOutside);
    }
  }
}

// ===============================================
// M√ìDULO: ORDENS DE PRODU√á√ÉO
// ===============================================

// PASSO 1: CARREGAR LINHAS
async function loadLines() {
  try {
    showLoading('linhasGrid');
    
    const response = await fetch('<%= fetch_lines_contingencia_ordens_path %>', {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    const result = await response.json();
    
    const linhasGrid = document.getElementById('linhasGrid');
    if (!linhasGrid) return;
    
    linhasGrid.innerHTML = '';
    
    if (result && result.length > 0) {
      result.forEach(linha => {
        const card = createLineCard(linha);
        linhasGrid.appendChild(card);
      });
    } else {
      linhasGrid.innerHTML = '<p>Nenhuma linha dispon√≠vel</p>';
    }
    
    hideLoading('linhasGrid');
  } catch (error) {
    console.error('Erro ao carregar linhas:', error);
    showAlert('Erro ao carregar linhas de produ√ß√£o', 'danger');
    hideLoading('linhasGrid');
  }
}

function createLineCard(linha) {
  const card = document.createElement('div');
  card.className = 'selection-card';
  card.onclick = () => selectLine(card, linha);
  card.innerHTML = `
    <span class="icon">üè≠</span>
    <div class="title">${linha.des_linha || linha.cod_linha}</div>
    <div class="description">C√≥digo: ${linha.cod_linha}</div>
  `;
  return card;
}

function selectLine(element, linha) {
  // Remove sele√ß√£o anterior
  document.querySelectorAll('#linhasGrid .selection-card').forEach(card => {
    card.classList.remove('selected');
  });
  
  // Seleciona nova linha
  element.classList.add('selected');
  selectedData.linha = linha;
  
  // Habilita pr√≥ximo passo
  const btnNext = document.getElementById('btnNext');
  if (btnNext) btnNext.disabled = false;
  
  // Reset dados posteriores
  selectedData.produto = null;
}

// PASSO 2: CARREGAR PRODUTOS DA LINHA
async function loadProductsByLine(codLinha) {
  try {
    showLoading('produtosGrid');
    
    const response = await fetch(`<%= fetch_products_by_line_contingencia_ordens_path %>?cod_linha=${codLinha}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    const result = await response.json();
    
    const produtosGrid = document.getElementById('produtosGrid');
    if (!produtosGrid) return;
    
    produtosGrid.innerHTML = '';
    
    if (result.products && result.products.length > 0) {
      result.products.forEach(produto => {
        const card = createProductCard(produto);
        produtosGrid.appendChild(card);
      });
    } else {
      produtosGrid.innerHTML = '<p>Nenhum produto dispon√≠vel para esta linha</p>';
    }
    
    hideLoading('produtosGrid');
  } catch (error) {
    console.error('Erro ao carregar produtos:', error);
    showAlert('Erro ao carregar produtos da linha', 'danger');
    hideLoading('produtosGrid');
  }
}

function createProductCard(produto) {
  const card = document.createElement('div');
  card.className = 'selection-card';
  card.onclick = () => selectProduct(card, produto);
  card.dataset.codigo = produto.cod_pro.toLowerCase(); // Para filtro
  card.innerHTML = `
    <span class="icon">üì¶</span>
    <div class="title">${produto.des_pro}</div>
    <div class="description">
      <strong>${produto.cod_pro}</strong><br>
      ${produto.uni_med} | ${produto.cod_mod || 'N/A'}
    </div>
  `;
  return card;
}

// Fun√ß√£o para filtrar produtos por c√≥digo
function filterProducts() {
  const filtro = document.getElementById('filtroCodigoProduto').value.toLowerCase();
  const cards = document.querySelectorAll('#produtosGrid .selection-card');
  
  cards.forEach(card => {
    const codigo = card.dataset.codigo;
    if (codigo.includes(filtro)) {
      card.style.display = 'block';
    } else {
      card.style.display = 'none';
    }
  });
}

function selectProduct(element, produto) {
  // Remove sele√ß√£o anterior
  document.querySelectorAll('#produtosGrid .selection-card').forEach(card => {
    card.classList.remove('selected');
  });
  
  // Seleciona novo produto
  element.classList.add('selected');
  selectedData.produto = produto;
  
  // Habilita pr√≥ximo passo
  const btnNext = document.getElementById('btnNext');
  if (btnNext) btnNext.disabled = false;
}

// PASSO 3: VALIDAR E PREPARAR DADOS DA ORDEM
function validateOrderData() {
  try {
    const numOrp = document.getElementById('numOrp')?.value;
    const qtdPrd = document.getElementById('qtdPrd')?.value;
    const qtdBat = document.getElementById('qtdBat')?.value;
    
    if (!numOrp || !qtdPrd || !qtdBat) {
      showAlert('Preencha todos os campos obrigat√≥rios', 'warning');
      return false;
    }
    
    // Armazena os dados da ordem sem criar ainda
    selectedData.numOrp = numOrp;
    selectedData.qtdPrd = parseFloat(qtdPrd);
    selectedData.qtdBat = parseFloat(qtdBat);
    
    showAlert('Dados da ordem validados! Agora adicione os itens.', 'success');
    return true;
  } catch (error) {
    console.error('Erro ao validar dados da ordem:', error);
    showAlert('Erro ao validar dados da ordem', 'danger');
    return false;
  }
}

// PASSO 4: CRIAR ORDEM COM ITENS
async function createOrderWithItems() {
  try {
    const items = [];
    // 1. Seleciona a estrutura correta da interface
    const equipmentColumns = document.querySelectorAll('.equipment-column');

    let sequenceCounter = 1; // Contador para a sequ√™ncia geral

    // 2. Percorre cada coluna de equipamento (balan√ßa)
    equipmentColumns.forEach(column => {
      const codBalanca = column.getAttribute('data-equipment');
      const steps = column.querySelectorAll('.step-item');

      // 3. Percorre cada passo dentro da coluna
      steps.forEach(step => {
        const codProInput = step.querySelector('.item-cod-cmp');
        const quantidadeInput = step.querySelector('.item-qtd-uti');

        // 4. Adiciona o item ao array apenas se ambos os campos estiverem preenchidos
        if (codProInput && quantidadeInput && codProInput.value.trim() !== '' && quantidadeInput.value.trim() !== '') {
          items.push({
            cod_pro: codProInput.value,
            seq_mod: sequenceCounter++, // Define a sequ√™ncia correta
            quantidade: parseFloat(quantidadeInput.value),
            cod_balanca: codBalanca
          });
        }
      });
    });

    if (items.length === 0) {
      showAlert('Adicione pelo menos um componente √† ordem', 'warning');
      return false; // Retorna false em caso de falha
    }

    const orderData = {
      contingencia_production_order: {
        num_orp: selectedData.numOrp,
        cod_linha: selectedData.linha.cod_linha,
        cod_pro: selectedData.produto.cod_pro,
        qtd_prd: selectedData.qtdPrd,
        qtd_bat: selectedData.qtdBat
      },
      items: items // Agora cont√©m os dados corretos
    };

    showLoading('btnNext'); // Pode ser um ID mais espec√≠fico para o bot√£o de finalizar

    const response = await fetch('<%= contingencia_ordens_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
      },
      body: JSON.stringify(orderData)
    });

    const result = await response.json();

    if (response.ok) {
      showAlert('Ordem de conting√™ncia criada com sucesso!', 'success');
      // showPage('ordens-listagem'); // Opcional: redirecionar para a listagem
      resetOrderForm();
      return true; // Retorna true em caso de sucesso
    } else {
      showAlert(result.error || 'Erro ao criar ordem', 'danger');
      return false;
    }

  } catch (error) {
    console.error('Erro ao criar ordem:', error);
    showAlert('Erro fatal ao criar ordem de produ√ß√£o. Verifique o console.', 'danger');
    return false;
  } finally {
    hideLoading('btnNext'); // Garante que o loading seja removido
    closeConfirmOrderModal();
  }
}

// Atualizar fun√ß√£o addItem para incluir balan√ßas
function addItem() {
  const container = document.getElementById('itensContainer');
  if (!container) return;
  
  const itemDiv = document.createElement('div');
  itemDiv.className = 'item-form';
  itemDiv.setAttribute('data-item', itemCounter);
  
  itemDiv.innerHTML = `
    <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 2fr 1fr; gap: 1rem; margin-bottom: 1rem; align-items: end;">
      <div class="form-group" style="margin-bottom: 0;">
        <label class="form-label">C√≥digo Componente</label>
        <div class="input-with-button">
          <input type="text" class="form-control item-cod-cmp" placeholder="Ex: COMP001" readonly>
          <button type="button" class="btn btn-outline btn-sm" onclick="openMateriaPrimaModal(${itemCounter})">
            üîç Buscar
          </button>
        </div>
      </div>
      <div class="form-group" style="margin-bottom: 0;">
        <label class="form-label">Sequ√™ncia</label>
        <input type="number" class="form-control item-seq-mod" value="" readonly style="display: none;">
      </div>
      <div class="form-group" style="margin-bottom: 0;">
        <label class="form-label">Quantidade</label>
        <input type="number" class="form-control item-qtd-uti" placeholder="10.5" step="0.1" min="0.1">
      </div>
      <div class="form-group" style="margin-bottom: 0;">
        <label class="form-label">C√≥digo Balan√ßa</label>
        <select class="form-control item-cod-balanca" onchange="onBalancaSelected(this)">
          <option value="">Selecione uma balan√ßa...</option>
        </select>
      </div>
      <div class="form-group" style="margin-bottom: 0;">
        <label class="form-label">A√ß√£o</label>
        <button type="button" class="btn btn-secondary" onclick="removeItem(${itemCounter})" style="padding: 0.75rem;">‚ùå</button>
      </div>
    </div>
  `;
  
  container.appendChild(itemDiv);
  
  // Carrega balan√ßas se linha j√° foi selecionada
  if (selectedData.linha) {
    loadEquipmentLines(selectedData.linha.cod_linha);
  }
  
  itemCounter++;
  renumberItems(); // Renumera todos os itens ap√≥s adi√ß√£o
}

// Fun√ß√£o chamada quando uma balan√ßa √© selecionada
function onBalancaSelected(selectElement) {
  const itemForm = selectElement.closest('.item-form');
  const sequenceInput = itemForm.querySelector('.item-seq-mod');
  
  if (selectElement.value && sequenceInput) {
    // Mostra o campo sequ√™ncia e define o valor
    sequenceInput.style.display = 'block';
    
    // Conta quantas balan√ßas j√° foram selecionadas para definir a sequ√™ncia
    const selectedBalancas = document.querySelectorAll('.item-cod-balanca option:checked:not([value=""])');
    sequenceInput.value = selectedBalancas.length;
  } else if (sequenceInput) {
    // Oculta o campo sequ√™ncia se nenhuma balan√ßa foi selecionada
    sequenceInput.style.display = 'none';
    sequenceInput.value = '';
  }
  
  // Renumera todos os itens
  renumberItems();
}

function removeItem(itemId) {
  const item = document.querySelector(`[data-item="${itemId}"]`);
  if (item) {
    item.remove();
    renumberItems(); // Renumera todos os itens ap√≥s remo√ß√£o
  }
}

// Fun√ß√£o para renumerar todos os itens
function renumberItems() {
  const items = document.querySelectorAll('.item-form');
  let sequence = 1;
  
  items.forEach((item) => {
    const balancaSelect = item.querySelector('.item-cod-balanca');
    const sequenceInput = item.querySelector('.item-seq-mod');
    
    if (balancaSelect && balancaSelect.value && sequenceInput) {
      sequenceInput.value = sequence;
      sequenceInput.style.display = 'block';
      sequence++;
    } else if (sequenceInput) {
      sequenceInput.style.display = 'none';
      sequenceInput.value = '';
    }
  });
}

async function addItemsToOrder() {
  try {
    const items = [];
    const itemForms = document.querySelectorAll('.item-form');
    
    itemForms.forEach(form => {
      const codPro = form.querySelector('.item-cod-cmp')?.value;
      const seqMod = form.querySelector('.item-seq-mod')?.value;
      const quantidade = form.querySelector('.item-qtd-uti')?.value;
      const codBalanca = form.querySelector('.item-cod-balanca')?.value;
      
      if (codPro && seqMod && quantidade && codBalanca) {
        items.push({
          cod_pro: codPro,
          seq_mod: parseInt(seqMod),
          quantidade: parseFloat(quantidade),
          cod_balanca: codBalanca
        });
      }
    });
    
    if (items.length === 0) {
      showAlert('Adicione pelo menos um item √† ordem', 'warning');
      return false;
    }

    if (!selectedData.ordemId) {
      showAlert('ID da ordem n√£o encontrado', 'danger');
      return false;
    }
    
    showLoading('btnNext');
    
    const response = await fetch(`<%= add_items_contingencia_orden_path('ORDEM_ID') %>`.replace('ORDEM_ID', selectedData.ordemId), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
      },
      body: JSON.stringify({ items: items })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showAlert('Ordem de conting√™ncia finalizada com sucesso!', 'success');
      
      // Reset do formul√°rio
      resetOrderForm();
      return true;
    } else {
      showAlert(result.error || 'Erro ao adicionar itens', 'danger');
      return false;
    }
  } catch (error) {
    console.error('Erro ao adicionar itens:', error);
    showAlert('Erro ao adicionar itens √† ordem', 'danger');
    return false;
  } finally {
    hideLoading('btnNext');
  }
}

async function nextStep() {
  if (currentStep === 1 && selectedData.linha) {
    // Carrega produtos da linha selecionada
    await loadProductsByLine(selectedData.linha.cod_linha);
    updateStep(2);
  } else if (currentStep === 2 && selectedData.produto) {
    updateStep(3);
  } else if (currentStep === 3) {
    // Valida dados da ordem sem criar
    const success = validateOrderData();
    if (success) {
      updateStep(4);
    }
  } else if (currentStep === 4) {
    console.log('üéØ Passo 4 - Tentando abrir modal de confirma√ß√£o');
    
    // Verifica se pode finalizar antes de abrir modal
    const canFinalize = validateOrderCompletion();
    if (canFinalize) {
      // Abre modal de confirma√ß√£o
      openConfirmOrderModal();
    } else {
      showAlert('Preencha pelo menos 1 passo de cada balan√ßa antes de finalizar', 'warning');
    }
  }
}

// Fun√ß√£o para abrir modal de confirma√ß√£o - SIMPLIFICADA
function openConfirmOrderModal() {
  console.log('üîç Abrindo modal simplificado...');
  
  try {
    // Preenche dados b√°sicos da ordem
    document.getElementById('confirm-num-orp').textContent = selectedData.numOrp || '-';
    document.getElementById('confirm-linha').textContent = selectedData.linha ? `${selectedData.linha.cod_linha} - ${selectedData.linha.des_linha}` : '-';
    document.getElementById('confirm-produto').textContent = selectedData.produto ? `${selectedData.produto.cod_pro} - ${selectedData.produto.des_pro}` : '-';
    document.getElementById('confirm-qtd-prd').textContent = selectedData.qtdPrd || '-';
    
    // Preenche componentes de forma simples
    const componentsList = document.getElementById('confirm-components-list');
    componentsList.innerHTML = '';
    
    const equipmentColumns = document.querySelectorAll('.equipment-column');
    equipmentColumns.forEach(column => {
      const equipmentCode = column.getAttribute('data-equipment');
      const steps = column.querySelectorAll('.step-item');
      
      steps.forEach(step => {
        const stepNumber = step.getAttribute('data-step');
        const codInput = step.querySelector('.item-cod-cmp');
        const qtyInput = step.querySelector('.item-qtd-uti');
        
        if (codInput && qtyInput && codInput.value.trim() && qtyInput.value.trim()) {
          const itemDiv = document.createElement('div');
          itemDiv.style.cssText = 'display: flex; justify-content: space-between; padding: 0.5rem; border-bottom: 1px solid #eee; align-items: center;';
          itemDiv.innerHTML = `
            <div><strong>${equipmentCode} - Passo ${stepNumber}:</strong> ${codInput.value}</div>
            <div style="color: #666;">Qtd: ${qtyInput.value}</div>
          `;
          componentsList.appendChild(itemDiv);
        }
      });
    });
    
    // Mostra modal de forma simples
    const modal = document.getElementById('confirmOrderModal');
    modal.style.display = 'block';
    console.log('‚úÖ Modal simplificado aberto');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
    alert('Erro ao abrir confirma√ß√£o');
  }
}

// Fun√ß√£o para fechar modal - SIMPLIFICADA
function closeConfirmOrderModal() {
  const modal = document.getElementById('confirmOrderModal');
  modal.style.display = 'none';
}

// Fun√ß√£o para finalizar ordem ap√≥s confirma√ß√£o
async function finalizeOrder() {
  // A fun√ß√£o createOrderWithItems j√° lida com tudo:
  // coleta de dados, envio, alertas, e fechamento do modal.
  await createOrderWithItems();
}

function previousStep() {
  if (currentStep > 1) {
    updateStep(currentStep - 1);
  }
}

function resetOrderForm() {
  currentStep = 1;
  selectedData = {
    linha: null,
    produto: null,
    numOrp: null,
    qtdPrd: null,
    qtdBat: null
  };
  
  // Limpa formul√°rios
  const numOrp = document.getElementById('numOrp');
  const qtdPrd = document.getElementById('qtdPrd');
  const qtdBat = document.getElementById('qtdBat');
  
  if (numOrp) numOrp.value = '';
  if (qtdPrd) qtdPrd.value = '';
  if (qtdBat) qtdBat.value = '';
  
  // Reset itens
  const container = document.getElementById('itensContainer');
  if (container) {
    container.innerHTML = `
      <div class="item-form" data-item="0">
        <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 2fr 1fr; gap: 1rem; margin-bottom: 1rem; align-items: end;">
          <div class="form-group" style="margin-bottom: 0;">
            <label class="form-label">C√≥digo Componente</label>
            <input type="text" class="form-control item-cod-cmp" placeholder="Ex: COMP001">
          </div>
          <div class="form-group" style="margin-bottom: 0;">
            <label class="form-label">Sequ√™ncia</label>
            <input type="number" class="form-control item-seq-mod" placeholder="1" min="1">
          </div>
          <div class="form-group" style="margin-bottom: 0;">
            <label class="form-label">Quantidade</label>
            <input type="number" class="form-control item-qtd-uti" placeholder="10.5" step="0.1" min="0.1">
          </div>
          <div class="form-group" style="margin-bottom: 0;">
            <label class="form-label">C√≥digo Balan√ßa</label>
            <input type="text" class="form-control item-cod-balanca" placeholder="Ex: BAL001">
          </div>
          <div class="form-group" style="margin-bottom: 0;">
            <label class="form-label">A√ß√£o</label>
            <button type="button" class="btn btn-secondary" onclick="removeItem(0)" style="padding: 0.75rem;">‚ùå</button>
          </div>
        </div>
      </div>
    `;
  }
  
  itemCounter = 1;
  
  // Remove sele√ß√µes
  document.querySelectorAll('.selection-card').forEach(card => {
    card.classList.remove('selected');
  });
  
  updateStep(1);
}

async function loadOrdersListagem() {
  try {
    const response = await fetch('<%= contingencia_ordens_path %>', {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    const result = await response.json();
    
    const tbody = document.getElementById('ordensListagemBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    if (result && result.length > 0) {
      result.forEach(ordem => {
        const row = createOrderRowListagem(ordem);
        tbody.appendChild(row);
      });
    } else {
      tbody.innerHTML = '<tr><td colspan="7" style="text-align: center;">Nenhuma ordem encontrada</td></tr>';
    }
  } catch (error) {
    console.error('Erro ao carregar ordens:', error);
  }
}

function createOrderRowListagem(ordem) {
  const row = document.createElement('tr');
  const statusClass = getStatusClass(ordem.status);
  const statusText = getStatusText(ordem.status);
  const createdAt = new Date(ordem.created_at).toLocaleDateString('pt-BR');
  
  row.innerHTML = `
    <td>${ordem.num_orp}</td>
    <td>${ordem.cod_linha}</td>
    <td>${ordem.cod_pro}</td>
    <td>${ordem.qtd_prd}</td>
    <td>${ordem.qtd_bat}</td>
    <td><span class="status-badge ${statusClass}">${statusText}</span></td>
    <td>${createdAt}</td>
  `;
  return row;
}

function getStatusClass(status) {
  switch(status) {
    case '0': return 'status-pendente';
    case '1': return 'status-rodando';
    case '2': return 'status-finalizada';
    case '3': return 'status-cancelada';
    default: return 'status-pendente';
  }
}

function getStatusText(status) {
  switch(status) {
    case '0': return 'Pendente';
    case '1': return 'Rodando';
    case '2': return 'Finalizada';
    case '3': return 'Cancelada';
    default: return 'Pendente';
  }
}

// ===============================================
// M√ìDULO: PRODUTOS DE CONTING√äNCIA
// ===============================================

async function loadUnityMeasurements() {
  console.log('üîÑ Iniciando carregamento de unidades de medida...');
  
  try {
    console.log('üì° Fazendo requisi√ß√£o para fetch_unity_measurements');
    const response = await fetch('<%= fetch_unity_measurements_contingencia_produtos_path %>', {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    console.log('üì° Response status:', response.status);
    
    const result = await response.json();
    console.log('üì¶ Dados recebidos:', result);
    
    const select = document.getElementById('uniMed');
    console.log('üéØ Elemento select encontrado:', select);
    console.log('üéØ P√°gina atual ativa:', document.querySelector('.page-content.active')?.id);
    
    if (!select) {
      console.error('‚ùå Elemento select #uniMed n√£o encontrado!');
      console.log('üîç Todos os elementos com ID uniMed:', document.querySelectorAll('#uniMed'));
      console.log('üîç P√°gina de produtos vis√≠vel:', document.getElementById('page-produtos-cadastro')?.style.display);
      return;
    }
    
    select.innerHTML = '<option value="">Selecione uma unidade...</option>';
    console.log('üßπ Select limpo, op√ß√£o padr√£o adicionada');
    
    if (result && result.length > 0) {
      console.log(`üìã Processando ${result.length} unidades de medida`);
      result.forEach((uom, index) => {
        const option = document.createElement('option');
        option.value = uom.uni_med;
        option.textContent = `${uom.uni_med} - ${uom.des_uni_med}`;
        select.appendChild(option);
        console.log(`‚úÖ Op√ß√£o ${index + 1} adicionada: ${uom.uni_med} - ${uom.des_uni_med}`);
      });
      console.log('üéâ Todas as unidades de medida foram carregadas com sucesso!');
      console.log('üìä Total de op√ß√µes no select:', select.options.length);
    } else {
      console.warn('‚ö†Ô∏è Nenhuma unidade de medida encontrada nos dados');
    }
  } catch (error) {
    console.error('‚ùå Erro ao carregar unidades:', error);
  }
}

function setupProductForm() {
  const form = document.getElementById('produtoForm');
  if (!form) return;
  
  // Remove event listeners existentes para evitar duplica√ß√£o
  const newForm = form.cloneNode(true);
  form.parentNode.replaceChild(newForm, form);
  
  newForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    await saveProduto();
  });
  
  // Valida√ß√£o em tempo real
  const codPro = document.getElementById('codPro');
  const desPro = document.getElementById('desPro');
  const uniMed = document.getElementById('uniMed');
  
  function validateProductFields() {
    const btnSalvar = document.getElementById('btnSalvar');
    if (!btnSalvar) return;
    
    const isValid = codPro?.value && desPro?.value && uniMed?.value;
    btnSalvar.disabled = !isValid;
  }
  
  if (codPro) codPro.addEventListener('input', validateProductFields);
  if (desPro) desPro.addEventListener('input', validateProductFields);
  if (uniMed) uniMed.addEventListener('change', validateProductFields);
}

async function saveProduto() {
  try {
    const codPro = document.getElementById('codPro')?.value;
    const desPro = document.getElementById('desPro')?.value;
    const uniMed = document.getElementById('uniMed')?.value;
    
    if (!codPro || !desPro || !uniMed) {
      showAlertProdutos('Preencha todos os campos obrigat√≥rios', 'warning');
      return;
    }
    
    const productData = {
      contingencia_product: {
        cod_pro: codPro,
        des_pro: desPro,
        uni_med: uniMed
      }
    };
    
    showLoading('btnSalvar');
    
    const response = await fetch('<%= contingencia_produtos_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
      },
      body: JSON.stringify(productData)
    });
    
    const result = await response.json();
    
    console.log('üîç Response status:', response.status);
    console.log('üîç Response ok:', response.ok);
    console.log('üîç Result data:', result);
    
    if (response.ok) {
      showAlertProdutos('Produto de conting√™ncia criado com sucesso!', 'success');
      clearForm();
    } else {
      // Trata diferentes tipos de erro com mensagens espec√≠ficas
      let errorMessage = 'Erro ao criar produto';
      
      console.log('üö® Erro detectado:', result);
      
      if (result.error) {
        if (Array.isArray(result.error)) {
          // Se for um array de erros (valida√ß√µes do modelo)
          errorMessage = result.error.join(', ');
        } else if (typeof result.error === 'string') {
          // Se for uma string simples
          errorMessage = result.error;
        }
      }
      
      // Mensagens espec√≠ficas para erros comuns
      if (errorMessage.includes('cod_pro') && errorMessage.includes('taken')) {
        errorMessage = 'C√≥digo do produto j√° existe! Use um c√≥digo diferente.';
      } else if (errorMessage.includes('has already been taken')) {
        errorMessage = 'C√≥digo do produto j√° existe! Use um c√≥digo diferente.';
      } else if (errorMessage.includes('Unidade de Medida n√£o encontrada')) {
        errorMessage = 'Unidade de medida inv√°lida! Selecione uma unidade v√°lida.';
      } else if (errorMessage.includes('can\'t be blank')) {
        errorMessage = 'Todos os campos obrigat√≥rios devem ser preenchidos.';
      }
      
      console.log('üì¢ Mensagem final:', errorMessage);
      showAlertProdutos(errorMessage, 'danger');
    }
  } catch (error) {
    console.error('Erro ao salvar produto:', error);
    showAlertProdutos('Erro ao criar produto de conting√™ncia', 'danger');
  } finally {
    hideLoading('btnSalvar');
  }
}

async function loadProdutosCriados() {
  try {
    const response = await fetch('/list_contingencia_products');
    const result = await response.json();
    
    const tbody = document.getElementById('produtosCriadosBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    if (result.data && result.data.length > 0) {
      // Mostra apenas os 5 mais recentes
      const recentProducts = result.data.slice(0, 5);
      recentProducts.forEach(produto => {
        const row = createProductRowCriados(produto);
        tbody.appendChild(row);
      });
    }
  } catch (error) {
    console.error('Erro ao carregar produtos criados:', error);
  }
}

async function loadProdutosListagem() {
  try {
    document.getElementById('loadingProdutos').style.display = 'block';
    
    const response = await fetch('<%= contingencia_produtos_path %>', {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    const result = await response.json();
    
    const tbody = document.getElementById('produtosListagemBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    if (result && result.length > 0) {
      result.forEach(produto => {
        const row = createProductRowListagem(produto);
        tbody.appendChild(row);
      });
    } else {
      tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">Nenhum produto encontrado</td></tr>';
    }
  } catch (error) {
    console.error('Erro ao carregar produtos:', error);
    const tbody = document.getElementById('produtosListagemBody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">Erro ao carregar produtos</td></tr>';
    }
  } finally {
    document.getElementById('loadingProdutos').style.display = 'none';
  }
}

function createProductRowCriados(produto) {
  const row = document.createElement('tr');
  const createdAt = new Date(produto.created_at).toLocaleDateString('pt-BR');
  
  row.innerHTML = `
    <td>${produto.cod_pro}</td>
    <td>${produto.des_pro}</td>
    <td>${produto.uni_med}</td>
    <td>${createdAt}</td>
  `;
  return row;
}

function createProductRowListagem(produto) {
  const row = document.createElement('tr');
  const createdAt = new Date(produto.created_at).toLocaleDateString('pt-BR');
  const updatedAt = new Date(produto.updated_at).toLocaleDateString('pt-BR');
  
  row.innerHTML = `
    <td>${produto.id}</td>
    <td>${produto.cod_pro}</td>
    <td>${produto.des_pro}</td>
    <td>${produto.uni_med}</td>
    <td>${createdAt}</td>
    <td>${updatedAt}</td>
  `;
  return row;
}

function clearForm() {
  const codPro = document.getElementById('codPro');
  const desPro = document.getElementById('desPro');
  const uniMed = document.getElementById('uniMed');
  
  if (codPro) codPro.value = '';
  if (desPro) desPro.value = '';
  if (uniMed) uniMed.value = '';
  
  const btnSalvar = document.getElementById('btnSalvar');
  if (btnSalvar) btnSalvar.disabled = true;
}

// ===============================================
// M√ìDULO: MODAL MAT√âRIA-PRIMA
// ===============================================

let currentItemIndex = null;
let currentEquipment = null;
let currentModalStep = null; // Renomeando para evitar conflito

async function openMateriaPrimaModal(codEqp, stepNumber) {
  currentEquipment = codEqp;
  currentModalStep = stepNumber;
  const modal = document.getElementById('materiaPrimaModal');
  
  if (modal) {
    modal.classList.add('show');
    await loadMateriaPrima();
  }
}

function closeMateriaPrimaModal() {
  const modal = document.getElementById('materiaPrimaModal');
  if (modal) {
    modal.classList.remove('show');
  }
  currentEquipment = null;
  currentModalStep = null;
}

async function loadMateriaPrima(page = 1, filter = '') {
  try {
    const source = document.getElementById('materiaPrimaSource')?.value || 'contingencia';
    const response = await fetch(`<%= fetch_materia_prima_contingencia_ordens_path %>?page=${page}&cod_filter=${filter}&source=${source}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    const result = await response.json();
    
    if (result.materia_prima) {
      materiaPrimaData = result.materia_prima;
      renderMateriaPrimaList();
      renderMateriaPrimaPagination(result.pagination);
    }
  } catch (error) {
    console.error('Erro ao carregar mat√©ria-prima:', error);
    showAlert('Erro ao carregar mat√©ria-prima', 'danger');
  }
}

function renderMateriaPrimaList() {
  const list = document.getElementById('materiaPrimaList');
  if (!list) return;
  
  list.innerHTML = '';
  
  if (materiaPrimaData.length === 0) {
    list.innerHTML = '<p style="text-align: center; padding: 2rem; color: #6c757d;">Nenhuma mat√©ria-prima encontrada</p>';
    return;
  }
  
  materiaPrimaData.forEach(item => {
    const itemElement = document.createElement('div');
    itemElement.className = 'materia-prima-item';
    itemElement.onclick = () => selectMateriaPrima(item);
    
    itemElement.innerHTML = `
      <div class="materia-prima-info">
        <div class="materia-prima-code">${item.cod_pro}</div>
        <div class="materia-prima-desc">${item.des_pro}</div>
      </div>
      <div class="materia-prima-unit">${item.uni_med}</div>
    `;
    
    list.appendChild(itemElement);
  });
}

function renderMateriaPrimaPagination(pagination) {
  const container = document.getElementById('materiaPrimaPagination');
  if (!container || !pagination) return;
  
  container.innerHTML = '';
  
  if (pagination.pages > 1) {
    const paginationHtml = `
      <div class="pagination">
        ${pagination.prev ? `<button onclick="loadMateriaPrima(${pagination.prev})" class="btn btn-sm btn-outline">‚Üê Anterior</button>` : ''}
        <span>P√°gina ${pagination.page} de ${pagination.pages}</span>
        ${pagination.next ? `<button onclick="loadMateriaPrima(${pagination.next})" class="btn btn-sm btn-outline">Pr√≥ximo ‚Üí</button>` : ''}
      </div>
    `;
    container.innerHTML = paginationHtml;
  }
}

function selectMateriaPrima(item) {
  if (currentEquipment && currentModalStep) {
    const stepItem = document.querySelector(`[data-equipment="${currentEquipment}"][data-step="${currentModalStep}"]`);
    if (stepItem) {
      const input = stepItem.querySelector('.item-cod-cmp');
      if (input) {
        input.value = item.cod_pro;
        input.title = item.des_pro; // Tooltip com descri√ß√£o
        
        // Dispara valida√ß√£o ap√≥s selecionar produto
        validateOrderCompletion();
      }
    }
  }
  
  closeMateriaPrimaModal();
  showAlert(`Mat√©ria-prima ${item.cod_pro} selecionada!`, 'success');
}

// Fun√ß√£o para validar se a ordem pode ser finalizada
function validateOrderCompletion() {
  const equipmentColumns = document.querySelectorAll('.equipment-column');
  let canFinalize = true;
  
  // Verifica se cada equipamento tem pelo menos um passo preenchido
  equipmentColumns.forEach(column => {
    const equipmentCode = column.getAttribute('data-equipment');
    const steps = column.querySelectorAll('.step-item');
    let hasFilledStep = false;
    
    steps.forEach(step => {
      const codInput = step.querySelector('.item-cod-cmp');
      const qtyInput = step.querySelector('.item-qtd-uti');
      
      if (codInput && qtyInput && codInput.value.trim() && qtyInput.value.trim()) {
        hasFilledStep = true;
      }
    });
    
    if (!hasFilledStep) {
      canFinalize = false;
    }
  });
  
  // Habilita/desabilita bot√£o Finalizar Ordem
  const btnNext = document.getElementById('btnNext');
  if (btnNext && currentStep === 4) {
    btnNext.disabled = !canFinalize;
    
    // Atualiza texto do bot√£o baseado no estado
    if (canFinalize) {
      btnNext.textContent = '‚úÖ Finalizar Ordem';
      btnNext.classList.remove('btn-primary');
      btnNext.classList.add('btn-success');
    } else {
      btnNext.textContent = 'Preencha pelo menos 1 passo de cada balan√ßa';
      btnNext.classList.remove('btn-success');
      btnNext.classList.add('btn-primary');
    }
  }
  
  return canFinalize;
}

function filterMateriaPrima() {
  const filter = document.getElementById('materiaPrimaFilter').value;
  loadMateriaPrima(1, filter);
}

// ===============================================
// M√ìDULO: EQUIPMENT LINES (BALAN√áAS)
// ===============================================

async function loadEquipmentLines(codLinha) {
  try {
    const response = await fetch(`<%= fetch_equipment_lines_contingencia_ordens_path %>?cod_linha=${codLinha}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    const result = await response.json();
    
    if (result.equipment_lines) {
      renderEquipmentColumns(result.equipment_lines);
    }
  } catch (error) {
    console.error('Erro ao carregar equipamentos da linha:', error);
  }
}

function renderEquipmentColumns(equipmentLines) {
  const container = document.getElementById('itensContainer');
  if (!container) return;
  
  // Limpa container
  container.innerHTML = '';
  
  // Cria layout em grid baseado no n√∫mero de equipamentos
  const gridColumns = equipmentLines.length;
  container.style.display = 'grid';
  container.style.gridTemplateColumns = `repeat(${gridColumns}, 1fr)`;
  container.style.gap = '2rem';
  container.style.marginBottom = '2rem';
  
  // Renderiza uma coluna para cada equipamento
  equipmentLines.forEach((equipment, index) => {
    const equipmentColumn = createEquipmentColumn(equipment, index);
    container.appendChild(equipmentColumn);
  });
  
  // Chama valida√ß√£o inicial ap√≥s renderizar
  setTimeout(() => {
    validateOrderCompletion();
  }, 100);
}

function createEquipmentColumn(equipment, equipmentIndex) {
  const column = document.createElement('div');
  column.className = 'equipment-column';
  column.setAttribute('data-equipment', equipment.cod_eqp);
  
  // Header da coluna
  const header = document.createElement('div');
  header.className = 'equipment-header';
  header.innerHTML = `
    <h4>${equipment.cod_eqp}</h4>
    <p>${equipment.des_eqp || 'Equipamento'}</p>
    <small>M√°x: ${equipment.pas_max} passos</small>
  `;
  column.appendChild(header);
  
  // Container para os passos
  const stepsContainer = document.createElement('div');
  stepsContainer.className = 'equipment-steps';
  stepsContainer.setAttribute('data-equipment-steps', equipment.cod_eqp);
  
  // Cria os passos baseado no pas_max
  for (let step = 1; step <= equipment.pas_max; step++) {
    const stepItem = createStepItem(equipment.cod_eqp, step, equipmentIndex);
    stepsContainer.appendChild(stepItem);
  }
  
  column.appendChild(stepsContainer);
  return column;
}

function createStepItem(codEqp, stepNumber, equipmentIndex) {
  const stepDiv = document.createElement('div');
  stepDiv.className = 'step-item';
  stepDiv.setAttribute('data-equipment', codEqp);
  stepDiv.setAttribute('data-step', stepNumber);
  
  stepDiv.innerHTML = `
    <div class="step-header">
      <span class="step-number">Passo ${stepNumber}</span>
    </div>
    <div class="step-content">
      <div class="form-group">
        <label class="form-label">C√≥digo Componente</label>
        <div class="input-with-button">
          <input type="text" class="form-control item-cod-cmp" placeholder="Ex: COMP001" readonly onchange="validateOrderCompletion()">
          <button type="button" class="btn btn-outline btn-sm" onclick="openMateriaPrimaModal('${codEqp}', ${stepNumber})">
            üîç Buscar
          </button>
        </div>
      </div>
      <div class="form-group">
        <label class="form-label">Quantidade</label>
        <input type="number" class="form-control item-qtd-uti" placeholder="10.5" step="0.1" min="0.1" onchange="validateOrderCompletion()">
      </div>
    </div>
  `;
  
  return stepDiv;
}

function updateBalancaSelects(equipmentLines) {
  const selects = document.querySelectorAll('.item-cod-balanca');
  
  selects.forEach(select => {
    // Limpa op√ß√µes existentes exceto a primeira
    select.innerHTML = '<option value="">Selecione uma balan√ßa...</option>';
    
    // Adiciona novas op√ß√µes
    equipmentLines.forEach(equipment => {
      const option = document.createElement('option');
      option.value = equipment.cod_eqp;
      option.textContent = equipment.cod_eqp;
      select.appendChild(option);
    });
  });
}

// Atualizar fun√ß√£o updateStep para carregar balan√ßas no passo 4
function updateStep(step) {
  currentStep = step;
  
  // Atualiza visual dos steps
  document.querySelectorAll('.step').forEach(s => {
    const stepNum = parseInt(s.dataset.step);
    s.classList.remove('active', 'completed');
    
    if (stepNum < step) s.classList.add('completed');
    else if (stepNum === step) s.classList.add('active');
  });
  
  // Mostra se√ß√£o correspondente
  document.querySelectorAll('.form-section').forEach(section => {
    section.classList.remove('active');
  });
  const activeSection = document.querySelector(`[data-section="${step}"]`);
  if (activeSection) activeSection.classList.add('active');
  
  // Carrega balan√ßas quando chega no passo 4
  if (step === 4 && selectedData.linha) {
    loadEquipmentLines(selectedData.linha.cod_linha);
  }
  
  // Controla bot√µes
  const btnPrevious = document.getElementById('btnPrevious');
  const btnNext = document.getElementById('btnNext');
  
  if (btnPrevious) btnPrevious.disabled = step === 1;
  
  // Verifica se pode prosseguir
  let canProceed = false;
  if (step === 1) canProceed = selectedData.linha !== null;
  else if (step === 2) canProceed = selectedData.produto !== null;
  else if (step === 3) canProceed = false; // Ser√° habilitado ap√≥s valida√ß√£o dos campos
  else if (step === 4) canProceed = false; // Ser√° habilitado ap√≥s adicionar itens
  
  if (btnNext) {
    btnNext.disabled = !canProceed;
    
    // Atualiza texto do bot√£o
    if (step === 3) {
      btnNext.textContent = 'Validar Dados ‚Üí';
    } else if (step === 4) {
      btnNext.textContent = 'Finalizar Ordem';
    } else {
      btnNext.textContent = 'Pr√≥ximo ‚Üí';
    }
  }
}
function openReportingServices() {
  // Configurar URL do Reporting Services
  const reportingUrl = 'http://seu-servidor-reports/Reports'; // Substitua pela URL real
  
  showAlert('Redirecionando para o Reporting Services...', 'success');
  
  // Abre em nova aba
  setTimeout(() => {
    window.open(reportingUrl, '_blank');
  }, 1000);
}

// ===============================================
// UTILIT√ÅRIOS
// ===============================================
function showAlert(message, type = 'success') {
  const alertContainer = document.getElementById('alertContainer');
  if (!alertContainer) return;
  
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.textContent = message;
  
  alertContainer.appendChild(alert);
  
  // Remove ap√≥s 5 segundos
  setTimeout(() => {
    alert.remove();
  }, 5000);
}

function showAlertProdutos(message, type = 'success') {
  const alertContainer = document.getElementById('alertContainerProdutos');
  if (!alertContainer) return;
  
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.textContent = message;
  
  alertContainer.appendChild(alert);
  
  // Remove ap√≥s 5 segundos
  setTimeout(() => {
    alert.remove();
  }, 5000);
}

function showLoading(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.classList.add('loading');
    if (element.tagName === 'BUTTON') {
      element.innerHTML = '<span class="spinner"></span>Carregando...';
      element.disabled = true;
    }
  }
}

function hideLoading(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.classList.remove('loading');
    if (element.tagName === 'BUTTON') {
      element.disabled = false;
      
      // Restaura texto original baseado no ID do bot√£o
      if (elementId === 'btnNext') {
        element.innerHTML = 'Pr√≥ximo <span class="icon">‚Üí</span>';
      } else if (elementId === 'btnSalvar') {
        element.innerHTML = 'Salvar <span class="icon">‚úì</span>';
      } else {
        element.innerHTML = 'Conclu√≠do';
      }
      if (elementId === 'btnNext') {
        if (currentStep === 3) {
          element.textContent = 'Criar Ordem ‚Üí';
        } else if (currentStep === 4) {
          element.textContent = 'Finalizar Ordem';
        } else {
          element.textContent = 'Pr√≥ximo ‚Üí';
        }
      } else if (elementId === 'btnSalvar') {
        element.textContent = 'üíæ Salvar Produto';
      }
    }
  }
}

// Valida√ß√£o em tempo real dos campos da ordem - usando evento
document.addEventListener('loadOrdersForm', function() {
  const numOrp = document.getElementById('numOrp');
  const qtdPrd = document.getElementById('qtdPrd');
  const qtdBat = document.getElementById('qtdBat');
  
  function validateOrderFields() {
    if (currentStep === 3) {
      const btnNext = document.getElementById('btnNext');
      if (btnNext) {
        const isValid = numOrp?.value && qtdPrd?.value && qtdBat?.value;
        btnNext.disabled = !isValid;
      }
    }
  }
  
  if (numOrp) numOrp.addEventListener('input', validateOrderFields);
  if (qtdPrd) qtdPrd.addEventListener('input', validateOrderFields);
  if (qtdBat) qtdBat.addEventListener('input', validateOrderFields);
});
</script>